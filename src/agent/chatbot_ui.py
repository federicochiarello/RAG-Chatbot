import time
import streamlit as st
from langchain_core.messages import HumanMessage
from agent import build_graph, build_graph_small



st.title("💬 RAG-Agent Chatbot")



if 'graph' not in st.session_state:
    #st.session_state.graph = build_graph()
    st.session_state.graph = build_graph_small()

    # Create a thread
    st.session_state.config = {"configurable": {"thread_id": "42"}}

if "messages" not in st.session_state:
    st.session_state["messages"] = [{"role": "assistant", "content": "How can I help you?"}]

if "suggested_questions" not in st.session_state:
    st.session_state["suggested_questions"] = [
        "What are Nature-based Solutions (NbS)?",
        "Can you give me some information on the AcquaGuard project?",
        "Can you give me some information on the BlueGreen Governance project?"
    ]




def response_generator(prompt: str):

    with st.spinner('Processing...'):
        output = st.session_state.graph.invoke({"messages": [HumanMessage(content=prompt)]}, st.session_state.config)
        response = output['messages'][-1].content

    # Extend suggested questions
    st.session_state.suggested_questions = output.get("follow_up_questions", []) + st.session_state.suggested_questions

    for line in response.splitlines(keepends=True):
        for word in line.split():
            yield word + " "
            time.sleep(0.05)
        if line.endswith("\n"):
            yield "\n"
            time.sleep(0.05)

    return response




def send_question(prompt):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        stream = response_generator(prompt)
        response = st.write_stream(stream)
    st.session_state.messages.append({"role": "assistant", "content": response})
    st.rerun()




# Sidebar with suggested questions
st.sidebar.title("📝 Suggested Questions")
st.sidebar.write("Questions generated by the Chatbot to help you use this tool:")


# Display chat messages
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])


#
MAX_SUGGESTED_QUESTION_LENGTH = 5
if len(st.session_state.suggested_questions) > MAX_SUGGESTED_QUESTION_LENGTH:
    st.session_state.suggested_questions = st.session_state.suggested_questions[:MAX_SUGGESTED_QUESTION_LENGTH]

# Display sidebar buttons with suggested questions
for item in st.session_state.suggested_questions:
    if st.sidebar.button(item):
        if item in st.session_state.suggested_questions:
            st.session_state.suggested_questions.remove(item)
        send_question(item)


# Handle user input
if prompt := st.chat_input("What is up?"):
    send_question(prompt)